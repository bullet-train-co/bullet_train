#!/usr/bin/env ruby


require "#{__dir__}/configure-scripts/utils"
require "#{__dir__}/configure-scripts/check_ruby"
require "#{__dir__}/configure-scripts/update_configs"
require "#{__dir__}/configure-scripts/rename_origin"
require "#{__dir__}/configure-scripts/setup_github"
require "#{__dir__}/configure-scripts/check_postgres"
require "#{__dir__}/configure-scripts/check_redis"



puts "bailing out"
exit

def not_installed?(package)
  `brew info #{package} | grep "Not installed"`.strip.length > 0
end

def check_package(package)
  if not_installed?(package)
    puts "#{package} is not installed via Homebrew. Try running `brew install #{package}`.".red
    input = ask "Try proceeding without #{package}? [y/n]"
    if input.downcase[0] == "n"
      exit
    end
  else
    puts "#{package} is installed via Homebrew.".green
  end
end


# Do we even need to check for homebrew if we can find dependencies in other ways?
if `brew info 2> /dev/null`.length > 0
  puts "Homebrew is installed.".green
else
  puts "You don't have Homebrew installed. This isn't necessarily a problem, you might not even be on macOS, but we can't check your dependencies without it.".red
  input = ask "Try proceeding without Homebrew? [y/n]"
  if input.downcase[0] == "n"
    exit
  end
end

case Gem::Platform.local.os
when "darwin"
  check_package("postgresql@14")
  check_package("redis")
  check_package("icu4c")
when "linux"
  system_packages = `dpkg -l | grep '^ii'`.split("\n").map do |package_information|
    package_information.split("\s")[1]
  end

  if system_packages.select{|pkg| pkg.match?(/^libicu/)}.any?
    puts "You have icu4c installed.".green
  else
    puts "You don't have icu4c installed. Please run `sudo apt-get install libicu-dev`.".red
    exit
  end
else
  puts "We currently don't support this platform to check if you have the following libraries installed:".red
  puts "1. PostgreSQL"
  puts "2. Redis"
  puts "3. icu4c"
  puts ""
  puts "Please ensure they are installed before proceeding."
  input = ask "Proceed? [y/n]"
  if input.downcase[0] == "n"
    exit
  end
end

required_node = `cat ./.nvmrc`.strip
actual_node = begin
                `node -v`.strip.gsub("v", "")
              rescue
                :not_found
              end
message = "Bullet Train requires Node.js #{required_node} and `node -v` returns #{actual_node}."
if actual_node == :not_found
  puts "You don't have Node installed. We can't proceed without it. Try `brew install node`.".red
  exit
elsif Gem::Version.new(actual_node) >= Gem::Version.new(required_node)
  puts message.green
else
  puts message.red
  input = ask "Try proceeding with Node #{actual_node} anyway? [y/n]"
  if input.downcase[0] == "n"
    exit
  end
end

if `yarn -v 2> /dev/null`.length > 0
  puts "Yarn is installed.".green
else
  puts "You don't have Yarn installed. We can't proceed without it. Try `brew install yarn` or see the installation instructions at https://yarnpkg.com/getting-started/install .".red
  exit
end

# TODO: Uncomment this when the enable bulk invitations JS is implemented.
# Enable the bulk invitations configuration.
# bt_config_lines = File.open("config/initializers/bullet_train.rb").readlines
# new_lines = bt_config_lines.map do |line|
#   if line.match?("config.enable_bulk_invitations")
#     line.gsub!(/#\s*/, "")
#   end
#   line
# end
# File.write("config/initializers/bullet_train.rb", bt_config_lines.join)



unless skip_github
  original_repo_link = "https://github.com/bullet-train-co/bullet_train"
  new_repo_link = ask "What is the link to your repository? We will use this to enable the one-click deploy to Render button for your application."
  replace_in_file("README.example.md", original_repo_link, new_repo_link, /repo=#{original_repo_link}/)
end

puts "Running `bundle install`.".green
stream "bundle install"

puts "Running `yarn install`.".green
stream "yarn install"

if skip_github
  puts ""
  puts "Make sure you save your changes with Git.".yellow
else
  puts "Committing all these changes to the repository.".green
  stream "git add -A"
  stream "git commit -m \"Run configuration script.\""
  stream "git push origin #{local_branch}:main"
end

puts ""
puts "OK, we're done, but at some point you should edit `config/locales/en/application.en.yml`!".yellow
puts ""
puts "Next you can run `bin/setup`, then `bin/dev` to spawn a local instance, and then you can navigate to http://localhost:3000 to access your new application.".green
puts ""
