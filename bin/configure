#!/usr/bin/env ruby

def replace_in_file(file, before, after, target_regexp = nil)
  puts "Replacing in '#{file}'."
  if target_regexp
    target_file_content = ""
    File.open(file).each_line do |l|
      l.gsub!(before, after) if !!l.match(target_regexp)
      l if !!l.match(target_regexp)
      target_file_content += l
    end
  else
    target_file_content = File.open(file).read
    target_file_content.gsub!(before, after)
  end
  File.open(file, "w+") do |f|
    f.write(target_file_content)
  end
end

def stream(command, prefix = "  ")
  puts ""
  IO.popen(command) do |io|
    while (line = io.gets) do
      puts "#{prefix}#{line}"
    end
  end
  puts ""
end

def red(string)
  "\e[1;31m#{string}\e[0m"
end

def green(string)
  "\e[1;32m#{string}\e[0m"
end

def blue(string)
  "\e[1;34m#{string}\e[0m"
end

def yellow(string)
  "\e[1;33m#{string}\e[0m"
end

def ask(string)
  puts blue string
  return gets.strip
end

def not_installed?(package)
  `brew info #{package} | grep "Not installed"`.strip.length > 0
end

# Unless the shell's current version of Ruby is the same as what the application requires, we should flag it.
required_ruby = `cat ./.ruby-version`.strip
actual_ruby = `ruby -v`.strip
message = "Bullet Train requires Ruby #{required_ruby} and `ruby -v` returns #{actual_ruby}."
if actual_ruby.include?(required_ruby)
  puts green(message)
else
  puts red(message)
  input = ask "Try proceeding with with Ruby #{actual_ruby} anyway? [y]"
  if input.downcase[0] == "n"
    exit
  end
end

required_node = `cat ./.nvmrc`.strip
actual_node = `node -v`.strip.gsub("v", "")
message = "Bullet Train requires Node.js #{required_node} and `node -v` returns #{actual_node}."
if Gem::Version.new(actual_node) >= Gem::Version.new(required_node)
  puts green(message)
else
  puts red(message)
  input = ask "Try proceeding with Node #{actual_node} anyway? [y]"
  if input.downcase[0] == "n"
    exit
  end
end

if `brew info 2> /dev/null`.length > 0
  puts green "Homebrew is installed."
else
  puts red "You don't have Homebrew installed. This isn't necessarily a problem, you might not even be on macOS, but we can't check your dependencies without it."
  input = ask "Try proceeding without Homebrew?"
  if input.downcase[0] == "n"
    exit
  end
end

if not_installed?("postgresql@13")
  puts red "PostgreSQL 13 is not installed via Homebrew. Try running `brew install postgresql@13`."
  input = ask "Try proceeding without PostgreSQL 13?"
  if input.downcase[0] == "n"
    exit
  end
else
  puts green "PostgreSQL 13 is installed via Homebrew."
end

if not_installed?("redis")
  puts red "Redis is not installed via Homebrew. Try running `brew install redis`."
  input = ask "Try proceeding without Redis?"
  if input.downcase[0] == "n"
    exit
  end
else
  puts green "Redis is installed via Homebrew."
end

if not_installed?("icu4c")
  puts red "icu4c is not installed via Homebrew. Try running `brew install icu4c`."
  input = ask "Try proceeding without icu4c?"
  if input.downcase[0] == "n"
    exit
  end
end

if `yarn -v 2> /dev/null`.length > 0
  puts green "Yarn is installed."
else
  puts red "You don't have Yarn installed. We can't proceed without it. Try `brew install yarn` or see the installation instructions at https://yarnpkg.com/getting-started/install ."
  exit
end

puts "Next, let's push your application to GitHub."
puts "If you would like to use another service like Gitlab to manage your repository,"
puts "you can opt out of this step and set up the repository manually."
puts "(If you're not sure, we suggest going with GitHub)"
skip_github = ask "Continue setting up with GitHub? [y/n]"
if skip_github.downcase[0] == "y"
  if `git remote | grep bullet-train`.strip.length > 0
    puts yellow "Repository already has a \`bullet-train`\ remote."
  else
    if `git remote | grep origin`.strip.length > 0
      puts green "Renaming repository `origin` remote to `bullet-train`."
      `git remote rename origin bullet-train`
    else
      puts red "Repository has no `origin` remote, but also no `bullet-train` remote. Did something go wrong?"
    end
  end

  if `git remote | grep origin`.strip.length > 0
    puts yellow "Repository already has a \`origin`\ remote."
  else
    ask "Hit <Return> and we'll open a browser to GitHub where you can create a new repository. When you're done, copy the SSH path from the new repository and return here. We'll ask you to paste it to us in the next step."
    command = if Gem::Platform.local.os == "linux"
      "xdg-open"
    else
      "open"
    end
    `#{command} https://github.com/new`

    ssh_path = ask "OK, what was the SSH path? (It should look like `git@github.com:your-account/your-new-repo.git`.)"
    puts green "Setting repository's `origin` remote to `#{ssh_path}`."
    puts `git remote add origin #{ssh_path}`.chomp
  end

  local_branch = `git branch | grep "*"`.split.last

  puts green "Pushing repository to `origin`."
  stream "git push origin #{local_branch}:main 2>&1"
end

puts green "Running `bundle install`."
stream "bundle install"

if `yarn -v 2> /dev/null`.strip.length > 0
  puts green "Yarn is installed."
else
  puts red "Yarn is not installed. Try `brew install yarn`."
  exit
end

puts green "Running `yarn install`."
stream "yarn install"

# This should be available now.
require "active_support/inflector"

human = ask "What is the name of your new application in title case? (e.g. \"Some Great Application\")"
variable = ActiveSupport::Inflector.parameterize(human.gsub("-", " "), separator: '_')
environment_variable = ActiveSupport::Inflector.parameterize(human.gsub("-", " "), separator: '_').upcase
class_name = variable.classify
kebab_case = variable.tr("_", "-")
connected_name = variable.gsub("_", "") # i.e. `bullettrain` as opposed to `bullet_train`

puts ""
puts green "Replacing instances of \"Untitled Application\" with \"#{human}\" throughout the codebase."
replace_in_file("./.circleci/config.yml", "untitled_application", variable)
replace_in_file("./config/application.rb", "untitled_application", connected_name)
replace_in_file("./config/database.yml", "untitled_application", variable)
replace_in_file("./config/database.yml", "UNTITLED_APPLICATION", environment_variable)
replace_in_file("./config/cable.yml", "untitled_application", variable)
replace_in_file("./config/initializers/session_store.rb", "untitled_application", variable)
replace_in_file("./config/environments/production.rb", "untitled_application", variable)
replace_in_file("./config/application.rb", "UntitledApplication", class_name)
replace_in_file("./config/locales/en/application.en.yml", "Untitled Application", human, /name/)
replace_in_file("./config/locales/en/application.en.yml", "untitled_application", variable)
replace_in_file("./config/locales/en/application.en.yml", "untitled application", human.downcase, /keywords/)
replace_in_file("./config/locales/en/user_mailer.en.yml", "Untitled Application", human)
puts ""

puts green "Moving `./README.example.md` to `./README.md`."
puts `mv ./README.example.md ./README.md`.chomp

puts `rm .github/FUNDING.yml`.chomp

# We can only do this after the README is moved into place.
replace_in_file("./README.md", "Untitled Application", human)

if skip_github
  puts ""
  puts yellow("Make sure you save your changes with Git.")
else
  puts green "Committing all these changes to the repository."
  stream "git add -A"
  stream "git commit -m \"Run configuration script.\""
  stream "git push origin #{local_branch}:main"
end

puts ""
puts yellow "OK, we're done, but at some point you should edit `config/locales/en/application.en.yml`!"
puts ""
puts green "Next you can run `bin/setup` and then `bin/dev`."
puts ""
