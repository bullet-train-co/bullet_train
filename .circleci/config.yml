version: 2.1
orbs:
  ruby: circleci/ruby@0.1.2
  browser-tools: circleci/browser-tools@1.4.4
aliases:
  - &restore_bundler_cache
      name: Restore Bundler cache
      keys:
        - gem-cache-v1-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        - gem-cache-v1-{{ .Branch }}-
        - gem-cache-v1-
  - &restore_yarn_cache
      name: Restore Yarn cache
      keys:
        - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - yarn-packages-v1-{{ .Branch }}-
        - yarn-packages-
  - &save_bundle_cache
      name: Save Bundle cache
      key: gem-cache-v1-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle
  - &save_yarn_cache
      name: Save Yarn cache
      key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      paths:
        - node_modules
  - &ruby_node_browsers_docker_image
      - image: cimg/ruby:3.3.0-browsers
        environment:
          PGHOST: localhost
          PGUSER: untitled_application
          RAILS_ENV: test
  - &postgres_docker_image
      - image: cimg/postgres:14.2
        environment:
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: untitled_application_test
          POSTGRES_USER: untitled_application
  - &wait_for_docker
      # We run this because the DB might not be available for a while due to a race condition.
      run: dockerize -wait tcp://localhost:5432 -timeout 1m

jobs:
  'Standard Ruby':
    docker:
      - <<: *ruby_node_browsers_docker_image
    steps:
      - checkout

      # Restore dependency caches
      - restore_cache: *restore_bundler_cache
      - restore_cache: *restore_yarn_cache

      # Install dependencies
      - ruby/bundle-install
      - run: bundle clean --force
      - run: yarn install

      # Save dependency caches
      # We only do this as part of this job, because it's time consuming and we don't want it to slow down test runners.
      - save_cache: *save_bundle_cache
      - save_cache: *save_yarn_cache

      - run:
          name: Check Standard Ruby
          command: bundle exec standardrb

  'Database Schema Check':
    docker:
      - <<: *ruby_node_browsers_docker_image
      - <<: *postgres_docker_image
      - image: cimg/redis:6.2.6
    executor: ruby/default
    parallelism: 1
    steps:
      - checkout
      - restore_cache: *restore_bundler_cache

      # Install dependencies
      - ruby/bundle-install

      - run:
          name: Running rails db:migrate shouldn't cause changes
          command: bash ./.circleci/db_schema_check

  'Minitest':
    parameters:
      use-core-repo:
        type: boolean
    docker:
      - <<: *ruby_node_browsers_docker_image
      - <<: *postgres_docker_image
      - image: cimg/redis:6.2.6
    executor: ruby/default
    parallelism: 2
    steps:
      - browser-tools/install-chrome:
          chrome-version: "116.0.5845.96" # TODO: remove -> https://github.com/CircleCI-Public/browser-tools-orb/issues/75
          replace-existing: true # TODO: remove -> https://github.com/CircleCI-Public/browser-tools-orb/issues/75
      - browser-tools/install-chromedriver
      - checkout
      - restore_cache: *restore_bundler_cache
      - restore_cache: *restore_yarn_cache

      - when:
          condition: << parameters.use-core-repo >>
          steps:
            - run: ./bin/checkout-and-link-core-repo

      # Install dependencies
      - ruby/bundle-install
      - run: bin/link
      - run: yarn install
      - run: yarn build
      - run: yarn build:css

      - *wait_for_docker

      - run:
          name: Run tests with Knapsack Pro
          command: |
            export RAILS_ENV=test
            bundle exec rails "knapsack_pro:queue:minitest[--verbose]"
          environment:
            KNAPSACK_PRO_CI_NODE_TOTAL: 2

      # If you don't want to use Knapsack Pro, then use this configuration:
      #
      # - run:
      #     name: Run unit tests
      #     command: bundle exec rails test
      # - run:
      #     name: Run system tests
      #     command: bundle exec rails test:system

      - store_test_results:
          path: test/reports

  'Minitest with HIDE_THINGS':
    parameters:
      use-core-repo:
        type: boolean
    docker:
      - <<: *ruby_node_browsers_docker_image
      - <<: *postgres_docker_image
      - image: circleci/redis
    executor: ruby/default
    parallelism: 2
    steps:
      - browser-tools/install-chrome:
          chrome-version: "116.0.5845.96" # TODO: remove -> https://github.com/CircleCI-Public/browser-tools-orb/issues/75
          replace-existing: true # TODO: remove -> https://github.com/CircleCI-Public/browser-tools-orb/issues/75
      - browser-tools/install-chromedriver
      - checkout
      - restore_cache: *restore_bundler_cache
      - restore_cache: *restore_yarn_cache

      - when:
          condition: << parameters.use-core-repo >>
          steps:
            - run: ./bin/checkout-and-link-core-repo

      # Install dependencies
      - ruby/bundle-install
      - run: bundle clean --force
      - run: bundle exec rake bt:link
      - run: yarn install
      - run: yarn build
      - run: yarn build:css

      - *wait_for_docker

      - run:
          name: Run tests with Knapsack Pro
          command: |
            export RAILS_ENV=test
            bundle exec rails "knapsack_pro:queue:minitest[--verbose]"
          environment:
            KNAPSACK_PRO_CI_NODE_TOTAL: 2
            HIDE_THINGS: true

      # If you don't want to use Knapsack Pro, then use this configuration:
      #
      # - run:
      #     name: Run unit tests with HIDE_THINGS
      #     command: HIDE_THINGS=true bundle exec rails test
      # - run:
      #     name: Run system tests with HIDE_THINGS
      #     command: HIDE_THINGS=true bundle exec rails test:system

      - store_test_results:
          path: test/reports

  'Minitest for Super Scaffolding':
    parameters:
      use-core-repo:
        type: boolean
    docker:
      - <<: *ruby_node_browsers_docker_image
      - <<: *postgres_docker_image
      - image: cimg/redis:6.2.6
    executor: ruby/default
    parallelism: 7
    steps:
      - browser-tools/install-chrome:
          chrome-version: "116.0.5845.96" # TODO: remove -> https://github.com/CircleCI-Public/browser-tools-orb/issues/75
          replace-existing: true # TODO: remove -> https://github.com/CircleCI-Public/browser-tools-orb/issues/75
      - browser-tools/install-chromedriver
      - checkout

      # Restore dependency caches
      - restore_cache: *restore_bundler_cache
      - restore_cache: *restore_yarn_cache

      - when:
          condition: << parameters.use-core-repo >>
          steps:
            - run: ./bin/checkout-and-link-core-repo

      # Install dependencies
      - ruby/bundle-install
      - run: bin/link
      - run: yarn install
      - run: yarn build
      - run: yarn build:css

      - *wait_for_docker

      - run: bundle add spring
      - run:
          name: 'Setup Super Scaffolding System Test'
          command: bundle exec test/bin/setup-super-scaffolding-system-test
      - run:
          name: 'Run Super Scaffolding Test'
          command: bundle exec rails test test/system/super_scaffolding_test.rb
      - run:
          name: 'Run Super Scaffolding Partial Test'
          command: bundle exec rails test test/system/super_scaffolding_partial_test.rb
      - run:
          name: 'Run Super Scaffolding Incoming Webhooks Test'
          command: bundle exec rails test test/controllers/webhooks/incoming/some_provider_webhooks_controller_test.rb

      - store_test_results:
          path: test/reports

  'System Tests with Cuprite':
    parameters:
      use-core-repo:
        type: boolean
    docker:
      - <<: *ruby_node_browsers_docker_image
      - <<: *postgres_docker_image
      - image: cimg/redis:6.2.6
    executor: ruby/default
    parallelism: 2
    steps:
      - browser-tools/install-chrome:
          chrome-version: "116.0.5845.96" # TODO: remove -> https://github.com/CircleCI-Public/browser-tools-orb/issues/75
          replace-existing: true # TODO: remove -> https://github.com/CircleCI-Public/browser-tools-orb/issues/75
      - browser-tools/install-chromedriver
      - checkout
      - restore_cache: *restore_bundler_cache
      - restore_cache: *restore_yarn_cache

      - when:
          condition: << parameters.use-core-repo >>
          steps:
            - run: ./bin/checkout-and-link-core-repo

      # Install dependencies
      - ruby/bundle-install
      - run: bin/link
      - run: yarn install
      - run: yarn build
      - run: yarn build:css

      - *wait_for_docker

      - run:
          name: Run system tests with cuprite as system test driver
          command: |
            if test $BT_CORE_CI
            then
              echo "Running system tests with Cuprite"
              sed -i'.orig' 's/# gem "cuprite"/gem "cuprite"/' Gemfile
              sed -i'.orig' 's/gem "selenium-webdriver"/# gem "selenium-webdriver"/' Gemfile
              sed -i'.orig' 's/gem "webdrivers"/# gem "webdrivers"/' Gemfile
              bundle install
              bundle exec rails "knapsack_pro:queue:minitest[--verbose]"
            else
              echo "Skipping system tests with Cuprite"
              exit 0
            fi
          environment:
            RAILS_ENV: test
            KNAPSACK_PRO_CI_NODE_TOTAL: 2
            KNAPSACK_PRO_TEST_FILE_PATTERN: "test/system/**{,/*/**}/*_test.rb"

  # Uncomment the job at the bottom of this file to run these system tests.
  'System Tests for Action Models':
    parameters:
      use-core-repo:
        type: boolean
    docker:
      - <<: *ruby_node_browsers_docker_image
      - <<: *postgres_docker_image
      - image: cimg/redis:6.2.6
    executor: ruby/default
    parallelism: 2

    steps:
      - browser-tools/install-chrome:
          chrome-version: "116.0.5845.96" # TODO: remove -> https://github.com/CircleCI-Public/browser-tools-orb/issues/75
          replace-existing: true # TODO: remove -> https://github.com/CircleCI-Public/browser-tools-orb/issues/75
      - browser-tools/install-chromedriver
      - checkout
      - restore_cache: *restore_bundler_cache
      - restore_cache: *restore_yarn_cache

      - when:
          condition: << parameters.use-core-repo >>
          steps:
            - run: ./bin/checkout-and-link-core-repo

      # Install dependencies
      - ruby/bundle-install
      - run: bin/link
      - run: yarn install
      - run: yarn build
      - run: yarn build:css

      - *wait_for_docker

      - run: bundle add spring
      - run:
          name: 'Setup Action Models System Test'
          command: bundle exec test/bin/setup-action-models-system-test
      - run:
          name: 'Run Action Models Test'
          command: bundle exec rails test test/system/action_models_test.rb

workflows:
  version: 2.1
  build:
    jobs:
      - 'Standard Ruby'
      - 'Database Schema Check'
      - 'Minitest':
          name: 'Core: Minitest'
          use-core-repo: true
      - 'Minitest':
          name: 'Release: Minitest'
          use-core-repo: false
      - 'Minitest with HIDE_THINGS':
          name: 'Core: Minitest with HIDE_THINGS'
          use-core-repo: true
      - 'Minitest with HIDE_THINGS':
          name: 'Release: Minitest with HIDE_THINGS'
          use-core-repo: false
      - 'Minitest for Super Scaffolding':
          name: 'Core: Minitest for Super Scaffolding'
          use-core-repo: true
      - 'Minitest for Super Scaffolding':
          name: 'Release: Minitest for Super Scaffolding'
          use-core-repo: false
      # - 'System Tests with Cuprite'
      # - 'System Tests for Action Models'
