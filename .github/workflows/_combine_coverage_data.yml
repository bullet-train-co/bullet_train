# This workflow will download runtime log artifacts created by parallel_test and combine
# them into one log that is then used by subsequent test runs to help split up test files
# more efficiently into groups.
#
# This workflow is meant to be called by other workflows.
name: "ðŸªµ Combine Runtime Logs for Parallel Tests"
on:
  workflow_call:

jobs:
  combine_runtime_logs:
    name: "ðŸªµ"
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: test
      # Manually export your local RAILS_MASTER_KEY if using the credentials system.
      # RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      BUNDLE_JOBS: 2
      BUNDLE_RETRY: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: tmp/starter

      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          working-directory: tmp/starter
          bundler-cache: true

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: tmp/starter/coverage_artifacts
          pattern: test_coverage_*.log
          merge-multiple: false

      - name: List downloaded artifacts
        run: ls -alR tmp/starter/coverage_artifacts
        shell: bash

      #- name: List coverage dir
        #run: ls -alR tmp/starter/coverage
        #continue-on-error: true
        #shell: bash

      - name: Combine Coverage Data
        working-directory: tmp/starter
        run: "bundle exec rake coverage:report"
        shell: bash

      - name: List downloaded artifacts
        run: ls -alR tmp/starter/coverage_artifacts
        shell: bash

      - name: List coverage dir
        run: ls -alR tmp/starter/coverage
        continue-on-error: true
        shell: bash

      - name: cat .last_run.json
        run: cat tmp/starter/coverage/.last_run.json
        continue-on-error: true
        shell: bash

      - name: cat .resultset.json
        run: cat tmp/starter/coverage/.resultset.json
        continue-on-error: true
        shell: bash

      - uses: joshmfrankel/simplecov-check-action@main
        with:
          minimum_suite_coverage: 65
          minimum_file_coverage: 30
          github_token: ${{ secrets.GITHUB_TOKEN }}
          coverage_path: tmp/starter/coverage/.last_run.json
          coverage_json_path: tmp/starter/coverage/coverage.json

      - uses: actions/github-script@v7
        id: create-summary
        with:
          script: |
            core.summary.addHeading('Coverage Results', 2)
            try {
              const fs = require('fs')
              const jsonString = fs.readFileSync('tmp/starter/coverage/coverage.json')
              var coverageData = JSON.parse(jsonString)
              core.summary.addHeading(`${coverageData["metrics"]["covered_percent"]} Covered`,3)
            } catch(err) {
              core.summary.addRaw("Error while reading or parsing the coverage JSON", true)
              core.summary.addRaw(err.toString(), true)
              core.error("Error while reading or parsing the coverage JSON")
              core.setFailed(err)
            }
            core.summary.write()

