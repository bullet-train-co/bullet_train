# This workflow builds a Docker image based on some input parameters
#
# This workflow is meant to be called by other workflows.
name: "Build & Push"
on:
  workflow_call:
    inputs:
      image-name:
        description: 'The target name of the image to build'
        required: true
        type: string
      dockerfile:
        description: 'The Dockerfile to use to build the image'
        required: true
        type: string
      runs-on:
        description: 'The type of runner to use. Usually ubuntu-latest or ubuntu-24.04-arm'
        required: true
        type: string
      platform:
        description: 'The platform to build for.'
        required: true
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  build_image:
    name: "Build & Push"
    runs-on: ${{ inputs.runs-on }}
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    #permissions:
      #contents: read
      #packages: write
      #attestations: write
      #id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Bullet Train Version
        id: extract-bullet-train-version
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const fs = require('fs')
            const gemString = fs.readFileSync('Gemfile').toString()
            const lines = gemString.split('\n')
            const versionToken = "BULLET_TRAIN_VERSION = ";
            const equalToken = " = "
            for await (const line of lines) {
              if (line.includes(versionToken)) {
                return line.split(equalToken)[1].trim().replaceAll('"','')
              }
            }

      - name: Prepare
        run: |
          platform=${{ inputs.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ inputs.image-name }}
          # generate Docker tags based on the following events/attributes
          # TODO: Do we need any of these tags other than the primary semver one?
          #tags: |
            ##type=schedule
            ##type=ref,event=branch
            ##type=ref,event=pr
            #type=semver,pattern={{version}},value=${{ steps.extract-bullet-train-version.outputs.result }}
            ##type=semver,pattern={{major}}.{{minor}},value=${{ steps.extract-bullet-train-version.outputs.result }}
            ##type=semver,pattern={{major}},value=${{ steps.extract-bullet-train-version.outputs.result }}
            ##type=sha

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          #push: true
          #tags: ${{ steps.meta.outputs.tags }}
          tags: ${{ env.REGISTRY }}/${{ inputs.image-name }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ inputs.platform }}
          outputs: type=image,push-by-digest=true,name-canonical=true,push=true
          build-args: |
            BULLET_TRAIN_VERSION=${{ steps.extract-bullet-train-version.outputs.result }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ inputs.image-name }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.push.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1
