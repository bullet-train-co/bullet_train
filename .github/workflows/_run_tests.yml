# This workflow runs the main test suite.
#
# This workflow is pimarily meant to be called by other workflows, but it can be run manually.
name: "ðŸ§ª ~ Run tests"
on:
  workflow_call:
    inputs:
      use-core-repo:
        required: false
        type: boolean
        default: false
  workflow_dispatch:
    inputs:
      use-core-repo:
        required: false
        type: boolean
        default: false

jobs:
  test:
    name: "ðŸ§ª"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Set identifiers for parallel jobs. These can be anything. Just include as many items as you want parallelism.
        # For instance if you want a Three Amigos themed pipeline you could use:
        # ci_node_index: [Dusty, Ned, Lucky]
        #ci_runners: [1,2,3,4]
        ci_runners: ["[1,2]","[3,4]"]
    services:
      postgres:
        image: postgres:11-alpine
        ports:
          - "5432:5432"
        env:
          POSTGRES_DB: rails_test
          POSTGRES_USER: rails
          POSTGRES_PASSWORD: password
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - "6379:6379"
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      RAILS_ENV: test
      # Manually export your local RAILS_MASTER_KEY if using the credentials system.
      # RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      DATABASE_URL: "postgres://rails:password@localhost:5432/rails_test"
      BUNDLE_JOBS: 2
      BUNDLE_RETRY: 3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: tmp/starter

      - name: pwd
        run: pwd
        shell: bash

      - name: ls tmp/starter
        run: ls -al tmp/starter
        shell: bash

      - name: ls main dir
        run: ls -al
        shell: bash

      - name: Checkout Core Repo
        uses: bullet-train-co/checkout-repo-with-matching-branch@v1
        if: ${{ inputs.use-core-repo == true }}
        with:
          target_dir: tmp/core
          repository: bullet-train-co/bullet_train-core

      - name: Install Ruby and gems
        uses: ruby/setup-ruby@v1
        with:
          working-directory: tmp/starter
          bundler-cache: true

      - name: Enable corepack
        run: corepack enable

      - uses: actions/setup-node@v4
        with:
          node-version-file: tmp/starter/.nvmrc
          cache: 'yarn'
          cache-dependency-path: tmp/starter/yarn.lock

      - name: Link Core Repo
        uses: bullet-train-co/link-core-gems@v1
        if: ${{ inputs.use-core-repo == true }}
        with:
          application_dir: tmp/starter
          core_dir: tmp/core

      - name: asset cache
        uses: actions/cache@v4
        with:
          path: |
            tmp/starter/public/assets
            tmp/starter/tmp/cache/assets/sprockets
          key: asset-cache-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            asset-cache-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
            asset-cache-${{ runner.os }}-${{ github.ref }}-
            asset-cache-${{ runner.os }}-

      - name: runtime log cache
        uses: actions/cache/restore@v4
        with:
          path: |
            tmp/starter/tmp/parallel_runtime_test.log
          key: runtime-cache-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            runtime-cache-${{ runner.os }}-${{ github.ref }}-${{ github.sha }}
            runtime-cache-${{ runner.os }}-${{ github.ref }}-
            runtime-cache-${{ runner.os }}-

      - name: Set up database schema
        #run: bin/rails db:schema:load
        run: bin/rake parallel:setup[2]
        working-directory: tmp/starter

      - run: yarn install
        working-directory: tmp/starter
      - run: yarn build
        working-directory: tmp/starter
      - run: yarn build:css
        working-directory: tmp/starter

      #- name: Run Tests
        #id: run-tests
        #env:
          #AUTH_ENDPOINT: https://no-site.nowhere
          #AWS_REGION: us-east-1
          #CI_NODE_TOTAL: ${{ strategy.job-total }}
          #CI_NODE_INDEX: ${{ strategy.job-index }}
        #continue-on-error: false
        #run : ./bin/parallel-ci
        #working-directory: tmp/starter
        #shell: bash
      - name: ls tmp/starter/tmp
        run: ls -al tmp/starter/tmp
        shell: bash

      - name: Touch Parallel Tests Runtime Log
        run: touch tmp/parallel_runtime_test.log
        working-directory: tmp/starter
        shell: bash

      - name: cat runtime log
        run: cat tmp/starter/tmp/parallel_runtime_test.log
        shell: bash

      - name: Run tests
        id: run-tests
        env:
          AUTH_ENDPOINT: https://no-site.nowhere
          AWS_REGION: us-east-1
          CI_NODE_TOTAL: ${{ strategy.job-total }}
          CI_NODE_INDEX: ${{ strategy.job-index }}
          PARALLEL_TESTS_RECORD_RUNTIME: true
          MINITEST_JUNIT_REPORTER: yes
        # TODO: Eventually we want to be able to do this by runtime, but how do we bootstrap that file?
        # This option is used to feed in runtime info from previous runs.
        # --runtime-log tmp/old_parallel_runtime.log \
        # This line allows excluding certain files...
        # --exclude-pattern '.*elasticsearch_integration_test.rb' || true
        run: |
          bundle exec parallel_test test \
          -n 2 \
          --only-group ${{ matrix.ci_runners }} \
          --serialize-stdout \
          --group-by runtime \
          --allowed-missing 100 \
          --combine-stderr \
          --verbose \
          --verbose-command \
          || true
        working-directory: tmp/starter
        shell: bash

      - name: ls tmp/starter/tmp
        run: ls -al tmp/starter/tmp
        shell: bash

      - name: cat runtime log
        run: cat tmp/starter/tmp/parallel_runtime_test.log
        shell: bash

      - name: Upload Parallel Test Runtime Log
        uses: actions/upload-artifact@v4
        with:
          name: parallel_runtime_test_${{ matrix.ci_runners }}.log
          path: tmp/starter/tmp/parallel_runtime_test.log

      - name: Test Summary
        uses: test-summary/action@v2
        with:
          paths: "tmp/starter/test/reports/**/TEST-*.xml"
        if: always()
